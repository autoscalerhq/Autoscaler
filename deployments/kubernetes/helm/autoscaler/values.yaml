# Global configurations that apply to all services.
global:
  replicaCount: 1
  image:
    repository: nginx
    pullPolicy: IfNotPresent
    tag: ""
  imagePullSecrets: []
  nameOverride: ""
  fullnameOverride: ""
  serviceAccount:
    create: true
    automount: true
    annotations: {}
    name: ""
  podAnnotations: {}
  podLabels: {}
  podSecurityContext: {}
  securityContext: {}
  resources: {}
  livenessProbe:
    httpGet:
      path: /
      port: http
  readinessProbe:
    httpGet:
      path: /
      port: http
  volumes: []
  volumeMounts: []
  nodeSelector: {}  # Default global nodeSelector, services can override
  tolerations: []   # Default global tolerations, services can override
  affinity: {}      # Default global affinity, services can override
  ingress:
    enabled: false  # Default is to disable Ingress
    className: nginx  # Define your Ingress class (e.g., NGINX or Traefik)
    annotations: { }  # Optional annotations for the Ingress resource
    hosts:
      - host: example.com
        paths:
          - path: /api
            pathType: Prefix
            serviceName: api-service
            servicePort: 5000
          - path: /web
            pathType: Prefix
            serviceName: webapp-service
            servicePort: 8080
    tls: # Optional TLS configuration
      - secretName: tls-secret
        hosts:
          - example.com


# Configuration specific to the web application service.
web:
  enabled: true
  replicaCount: 2
  image:
    repository: ghcr.io/autoscalerhq/web
    tag: "latest"
  service:
    type: ClusterIP
    port: 8080
  ingress:
    enabled: false
    className: "nginx"
    annotations: {}
    hosts:
      - host: webapp.example.com
        paths:
          - path: /
            pathType: Prefix
    tls: []
  autoscaling:
    enabled: true
    minReplicas: 2
    maxReplicas: 10
    targetCPUUtilizationPercentage: 70

  # Webapp specific nodeSelector, tolerations, and affinity settings.
  nodeSelector:
    app: webapp
    environment: production
  tolerations:
    - key: "webapp-role"
      operator: "Equal"
      value: "frontend"
      effect: "NoSchedule"
  affinity:
    podAffinity:
      requiredDuringSchedulingIgnoredDuringExecution:
        - labelSelector:
            matchExpressions:
              - key: app
                operator: In
                values:
                  - webapp
          topologyKey: "kubernetes.io/hostname"

# Configuration specific to the API service.
api:
  enabled: true
  replicaCount: 3
  image:
    repository: ghcr.io/autoscalerhq/api
    tag: "latest"
  service:
    type: ClusterIP
    port: 5000
  ingress:
    enabled: false
    className: "nginx"
    annotations: {}
    hosts:
      - host: api.example.com
        paths:
          - path: /
            pathType: Prefix
    tls: []
  autoscaling:
    enabled: true
    minReplicas: 1
    maxReplicas: 5
    targetCPUUtilizationPercentage: 75

  # API specific nodeSelector, tolerations, and affinity settings.
  nodeSelector:
    app: api
    environment: staging
  tolerations:
    - key: "api-role"
      operator: "Equal"
      value: "backend"
      effect: "NoSchedule"
  affinity:
    nodeAffinity:
      requiredDuringSchedulingIgnoredDuringExecution:
        nodeSelectorTerms:
          - matchExpressions:
              - key: kubernetes.io/e2e-az-name
                operator: In
                values:
                  - e2e-az1
                  - e2e-az2

# Configuration specific to the worker service.
worker:
  enabled: true
  replicaCount: 1
  image:
    repository: ghcr.io/autoscalerhq/worker
    tag: "latest"
  serviceAccount:
    create: true
    automount: true
  autoscaling:
    enabled: false

  # Worker specific nodeSelector, tolerations, and affinity settings.
  nodeSelector:
    app: worker
    environment: production
  tolerations:
    - key: "worker-role"
      operator: "Equal"
      value: "batch"
      effect: "NoExecute"
  affinity:
    podAntiAffinity:
      preferredDuringSchedulingIgnoredDuringExecution:
        - weight: 100
          podAffinityTerm:
            labelSelector:
              matchExpressions:
                - key: app
                  operator: In
                  values:
                    - worker
            topologyKey: "kubernetes.io/hostname"

postgresql:
  enabled: true # Set too false to use your own postgresql instance

nats:
  enabled: true # Set too false to use your own postgresql instance
  jetstream:
    enabled: true
    maxMemory: 4G
  metrics:
    enabled: true
  persistence:
    enabled: true

clickhouse:
  enabled: true # Set too false to use your own postgresql instance

dkron:
  enabled: true # Set too false to use your own dkron deployment instance

supertokens:
  enabled: true # Set too false to use your own dkron deployment instance

cerbos:
  enabled: true # Set too false to use your own dkron deployment instance


